name: deploy

on:
  push:
    branches: ["develop"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew

      # Java 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # application.yml 복원
      - name: Set environment values
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > src/main/resources/application.yml
        shell: bash

      # Gradle 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean build -x test

      # Docker 이미지 빌드 및 푸시
      - name: Docker build and push
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker build -t crewing-spring .
          docker tag triplog_spring ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${GITHUB_SHA::7}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${GITHUB_SHA::7}

      # EC2에서 컨테이너 실행
      - name: Deploy to EC2 with Docker
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

            # 최신 이미지 pull 및 태깅
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${GITHUB_SHA::7}
            sudo docker tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${GITHUB_SHA::7} crewing-spring

            # 기존 컨테이너 종료 및 삭제
            sudo docker stop crewing-spring || true
            sudo docker rm crewing-spring || true

            # 새 컨테이너 실행
            sudo docker run -d --name crewing-spring -p 8080:8080 crewing-spring

            # 이전 이미지 정리
            CURRENT_IMAGE_ID=$(sudo docker images --format "{{.Repository}} {{.Tag}} {{.ID}}" | grep "${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }} ${GITHUB_SHA::7}" | awk '{print $3}')
            for IMAGE_ID in $(sudo docker images ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }} --format "{{.ID}}" | sort -u | grep -v "$CURRENT_IMAGE_ID"); do
              sudo docker rmi "$IMAGE_ID" || true
            done
            sudo docker image prune -f

